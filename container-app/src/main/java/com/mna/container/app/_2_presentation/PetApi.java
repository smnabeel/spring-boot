/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mna.container.app._2_presentation;

import java.util.List;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.mna.container.app._3_application.PetApiDelegate;
import com.mna.container.app._4_domain.api.model.ModelApiResponse;
import com.mna.container.app._4_domain.api.model.Pet;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@RequestMapping("${openapi.swaggerPetstoreOpenAPI30.base-path:/api/v3}")
public interface PetApi {

    default PetApiDelegate getDelegate() {
        return new PetApiDelegate() {};
    }

    /**
     * POST /pet : Add a new pet to the store
     * Add a new pet to the store
     *
     * @param pet Create a new pet in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<Pet> addPet(
         @Valid @RequestBody Pet pet
    ) {
        return getDelegate().addPet(pet);
    }


    /**
     * DELETE /pet/{petId} : Deletes a pet
     * 
     *
     * @param petId Pet id to delete (required)
     * @return Invalid pet value (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pet/{petId}"
    )
    
    default ResponseEntity<Void> deletePet(
         @PathVariable("petId") Long petId
    ) {
        return getDelegate().deletePet(petId);
    }


    /**
     * GET /pet/findByStatus : Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to available)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/findByStatus",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Pet>> findPetsByStatus(
         @Valid @RequestParam(value = "status", required = false, defaultValue = "available") String status
    ) {
        return getDelegate().findPetsByStatus(status);
    }


    /**
     * GET /pet/findByTags : Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param tags Tags to filter by (optional)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/findByTags",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Pet>> findPetsByTags(
         @Valid @RequestParam(value = "tags", required = false) List<String> tags
    ) {
        return getDelegate().findPetsByTags(tags);
    }


    /**
     * GET /pet/{petId} : Find pet by ID
     * Returns a single pet
     *
     * @param petId ID of pet to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/{petId}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Pet> getPetById(
         @PathVariable("petId") Long petId
    ) {
        return getDelegate().getPetById(petId);
    }


    /**
     * PUT /pet : Update an existing pet
     * Update an existing pet by Id
     *
     * @param pet Update an existent pet in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pet",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<Pet> updatePet(
         @Valid @RequestBody Pet pet
    ) {
        return getDelegate().updatePet(pet);
    }


    /**
     * POST /pet/{petId} : Updates a pet in the store with form data
     * 
     *
     * @param petId ID of pet that needs to be updated (required)
     * @param name Name of pet that needs to be updated (optional)
     * @param status Status of pet that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet/{petId}"
    )
    
    default ResponseEntity<Void> updatePetWithForm(
         @PathVariable("petId") Long petId,
         @Valid @RequestParam(value = "name", required = false) String name,
         @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return getDelegate().updatePetWithForm(petId, name, status);
    }


    /**
     * POST /pet/{petId}/uploadImage : uploads an image
     * 
     *
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional Metadata (optional)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet/{petId}/uploadImage",
        produces = { "application/json" },
        consumes = { "application/octet-stream" }
    )
    
    default ResponseEntity<ModelApiResponse> uploadFile(
         @PathVariable("petId") Long petId,
         @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
         @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
    ) {
        return getDelegate().uploadFile(petId, additionalMetadata, (MultipartFile) body);
    }

}
